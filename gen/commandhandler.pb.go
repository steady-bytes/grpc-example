// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commandhandler.proto

package commandhandler_v1

import (
	commands "commands"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommandRequest struct {
	// Types that are valid to be assigned to Command:
	//	*CommandRequest_PlaceOrder
	Command              isCommandRequest_Command `protobuf_oneof:"command"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f933585d6e32ab0, []int{0}
}
func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

type isCommandRequest_Command interface {
	isCommandRequest_Command()
}

type CommandRequest_PlaceOrder struct {
	PlaceOrder *commands.PlaceOrder `protobuf:"bytes,1,opt,name=place_order,json=placeOrder,proto3,oneof" json:"place_order,omitempty"`
}

func (*CommandRequest_PlaceOrder) isCommandRequest_Command() {}

func (m *CommandRequest) GetCommand() isCommandRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CommandRequest) GetPlaceOrder() *commands.PlaceOrder {
	if x, ok := m.GetCommand().(*CommandRequest_PlaceOrder); ok {
		return x.PlaceOrder
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommandRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommandRequest_PlaceOrder)(nil),
	}
}

type CommandResponse struct {
	AggregateId          string   `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResponse) Reset()         { *m = CommandResponse{} }
func (m *CommandResponse) String() string { return proto.CompactTextString(m) }
func (*CommandResponse) ProtoMessage()    {}
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f933585d6e32ab0, []int{1}
}
func (m *CommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResponse.Unmarshal(m, b)
}
func (m *CommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResponse.Marshal(b, m, deterministic)
}
func (m *CommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResponse.Merge(m, src)
}
func (m *CommandResponse) XXX_Size() int {
	return xxx_messageInfo_CommandResponse.Size(m)
}
func (m *CommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResponse proto.InternalMessageInfo

func (m *CommandResponse) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "commandhandler_v1.CommandRequest")
	proto.RegisterType((*CommandResponse)(nil), "commandhandler_v1.CommandResponse")
}

func init() { proto.RegisterFile("commandhandler.proto", fileDescriptor_9f933585d6e32ab0) }

var fileDescriptor_9f933585d6e32ab0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0xcd,
	0x4d, 0xcc, 0x4b, 0xc9, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x44, 0x15, 0x8d, 0x2f, 0x33, 0x94, 0x82, 0x29, 0x2c, 0xd6, 0xcf, 0x2f, 0x4a, 0x81,
	0x29, 0x54, 0x0a, 0xe1, 0xe2, 0x73, 0x86, 0x88, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x99, 0x73, 0x71, 0x17, 0xe4, 0x24, 0x26, 0xa7, 0xc6, 0x83, 0x95, 0x49, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x1b, 0x89, 0xe8, 0x81, 0x79, 0xf1, 0x65, 0x86, 0x7a, 0x01, 0x20, 0x49, 0x7f, 0x10, 0xcf,
	0x83, 0x21, 0x88, 0xab, 0x00, 0xce, 0x73, 0xe2, 0xe4, 0x62, 0x87, 0x5a, 0xa1, 0x64, 0xc2, 0xc5,
	0x0f, 0x37, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x91, 0x8b, 0x27, 0x31, 0x3d, 0xbd,
	0x28, 0x35, 0x3d, 0xb1, 0x24, 0x35, 0x3e, 0x33, 0x05, 0x6c, 0x2e, 0x67, 0x10, 0x37, 0x5c, 0xcc,
	0x33, 0xc5, 0x28, 0x09, 0xee, 0x16, 0x0f, 0x88, 0xb3, 0x85, 0x02, 0xb8, 0x58, 0x1d, 0x0b, 0x0a,
	0x72, 0x2a, 0x85, 0x14, 0xf5, 0x30, 0x3c, 0xa4, 0x87, 0xea, 0x6e, 0x29, 0x25, 0x7c, 0x4a, 0x20,
	0x8e, 0x50, 0x62, 0x48, 0x62, 0x03, 0x7b, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x3c,
	0xe8, 0xf7, 0x37, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandHandlerClient is the client API for CommandHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandHandlerClient interface {
	Apply(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type commandHandlerClient struct {
	cc *grpc.ClientConn
}

func NewCommandHandlerClient(cc *grpc.ClientConn) CommandHandlerClient {
	return &commandHandlerClient{cc}
}

func (c *commandHandlerClient) Apply(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/commandhandler_v1.CommandHandler/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandHandlerServer is the server API for CommandHandler service.
type CommandHandlerServer interface {
	Apply(context.Context, *CommandRequest) (*CommandResponse, error)
}

// UnimplementedCommandHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedCommandHandlerServer struct {
}

func (*UnimplementedCommandHandlerServer) Apply(ctx context.Context, req *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterCommandHandlerServer(s *grpc.Server, srv CommandHandlerServer) {
	s.RegisterService(&_CommandHandler_serviceDesc, srv)
}

func _CommandHandler_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandHandlerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandhandler_v1.CommandHandler/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandHandlerServer).Apply(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commandhandler_v1.CommandHandler",
	HandlerType: (*CommandHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _CommandHandler_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commandhandler.proto",
}
