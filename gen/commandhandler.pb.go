// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: commandhandler.proto

package commandhandler

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	commands "github.com/steady-bytes/grpc-example/proto/commands"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Code int32

const (
	Code_INVALID     Code = 0
	Code_PLACE_ORDER Code = 1
	Code_SAVE_USER   Code = 2
	Code_SAVE_ITEM   Code = 3
)

var Code_name = map[int32]string{
	0: "INVALID",
	1: "PLACE_ORDER",
	2: "SAVE_USER",
	3: "SAVE_ITEM",
}

var Code_value = map[string]int32{
	"INVALID":     0,
	"PLACE_ORDER": 1,
	"SAVE_USER":   2,
	"SAVE_ITEM":   3,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9f933585d6e32ab0, []int{0}
}

type Command struct {
	Type                 Code                 `protobuf:"varint,1,opt,name=type,proto3,enum=commandhandler.Code" json:"type,omitempty"`
	PlaceOrder           *commands.PlaceOrder `protobuf:"bytes,2,opt,name=place_order,json=placeOrder,proto3" json:"place_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f933585d6e32ab0, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetType() Code {
	if m != nil {
		return m.Type
	}
	return Code_INVALID
}

func (m *Command) GetPlaceOrder() *commands.PlaceOrder {
	if m != nil {
		return m.PlaceOrder
	}
	return nil
}

type Response struct {
	AggregateId          string   `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f933585d6e32ab0, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetAggregateId() string {
	if m != nil {
		return m.AggregateId
	}
	return ""
}

func init() {
	proto.RegisterEnum("commandhandler.Code", Code_name, Code_value)
	proto.RegisterType((*Command)(nil), "commandhandler.Command")
	proto.RegisterType((*Response)(nil), "commandhandler.Response")
}

func init() { proto.RegisterFile("commandhandler.proto", fileDescriptor_9f933585d6e32ab0) }

var fileDescriptor_9f933585d6e32ab0 = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0xdd, 0xc6, 0x98, 0x03, 0x25, 0x58, 0x43, 0x54, 0x05, 0x4d, 0xa5, 0xa7, 0xaa, 0x5a,
	0x62, 0x16, 0x24, 0x24, 0xca, 0x29, 0xeb, 0x82, 0xa8, 0x34, 0x58, 0x95, 0xc1, 0x90, 0xb8, 0x54,
	0x6e, 0x62, 0xdc, 0x88, 0x24, 0xcf, 0xb2, 0xdd, 0x95, 0x5e, 0x39, 0x73, 0x82, 0x3f, 0xc5, 0x11,
	0x89, 0x7f, 0x30, 0xf1, 0x43, 0x50, 0x9d, 0xb6, 0xda, 0x06, 0x07, 0x4e, 0xf9, 0xbe, 0xef, 0x7d,
	0xb1, 0xdf, 0xf7, 0x9e, 0xf1, 0x6e, 0x02, 0x45, 0xc1, 0xca, 0x74, 0xc2, 0xca, 0x34, 0xe7, 0xca,
	0x97, 0x0a, 0x0c, 0x90, 0xfa, 0x55, 0xb5, 0xf9, 0x48, 0x00, 0x88, 0x9c, 0x53, 0x26, 0x33, 0xca,
	0xca, 0x12, 0x0c, 0x33, 0x19, 0x94, 0xba, 0x72, 0x37, 0xf7, 0xed, 0x27, 0xf1, 0x04, 0x2f, 0x3d,
	0x3d, 0x63, 0x42, 0x70, 0x45, 0x41, 0x5a, 0xc7, 0x3f, 0xdc, 0x9e, 0xc8, 0xcc, 0x64, 0x3a, 0xf6,
	0x13, 0x28, 0xa8, 0x00, 0x01, 0xd4, 0xca, 0xe3, 0xe9, 0x47, 0xcb, 0x2c, 0xb1, 0x68, 0x69, 0x7f,
	0x76, 0xc9, 0x5e, 0xcc, 0x32, 0xf3, 0x09, 0x66, 0x54, 0x80, 0x67, 0x8b, 0xde, 0x39, 0xcb, 0xb3,
	0x94, 0x19, 0x50, 0x9a, 0xae, 0xe1, 0xf2, 0xbf, 0x55, 0x30, 0x4d, 0x41, 0xa5, 0xab, 0x60, 0x6d,
	0x81, 0xb7, 0xfb, 0x95, 0x4e, 0x3a, 0x78, 0xd3, 0xcc, 0x25, 0x6f, 0xa0, 0x16, 0xea, 0xd4, 0x83,
	0x5d, 0xff, 0xda, 0x20, 0xfa, 0x90, 0xf2, 0xd8, 0x3a, 0x48, 0x80, 0x1d, 0x99, 0xb3, 0x84, 0x8f,
	0xec, 0x49, 0x8d, 0x5a, 0x0b, 0x75, 0x9c, 0xe0, 0x9e, 0x5f, 0x9d, 0x3b, 0x5c, 0x54, 0x4e, 0x16,
	0x30, 0xc6, 0x72, 0x8d, 0xdb, 0x1e, 0xbe, 0x15, 0x73, 0x2d, 0xa1, 0xd4, 0x9c, 0x3c, 0xc6, 0xb7,
	0x99, 0x10, 0x8a, 0x0b, 0x66, 0xf8, 0x28, 0x4b, 0xed, 0x8d, 0x3b, 0xb1, 0xb3, 0xd6, 0x06, 0x69,
	0xf7, 0x10, 0x6f, 0x2e, 0x2e, 0x24, 0x0e, 0xde, 0x1e, 0xbc, 0x39, 0x0b, 0x8f, 0x07, 0x47, 0xee,
	0x0d, 0x72, 0x17, 0x3b, 0xc3, 0xe3, 0xb0, 0x1f, 0x8d, 0x4e, 0xe2, 0xa3, 0x28, 0x76, 0x11, 0xb9,
	0x83, 0x77, 0x4e, 0xc3, 0xb3, 0x68, 0xf4, 0xee, 0x34, 0x8a, 0xdd, 0xda, 0x9a, 0x0e, 0xde, 0x46,
	0xaf, 0xdd, 0x8d, 0x20, 0xc3, 0xf5, 0x65, 0xb6, 0x57, 0x55, 0x06, 0xf2, 0x1e, 0x6f, 0x85, 0x52,
	0xe6, 0x73, 0xf2, 0xe0, 0xef, 0x74, 0x96, 0x36, 0x1b, 0xd7, 0x0b, 0xab, 0xa6, 0xdb, 0x0f, 0xbf,
	0xfc, 0xfa, 0xfd, 0xbd, 0x76, 0xbf, 0xed, 0xda, 0xa5, 0x9f, 0x1f, 0xd0, 0xd5, 0x3c, 0x7b, 0xa8,
	0x7b, 0xf8, 0x15, 0x7d, 0x0b, 0x5f, 0x92, 0xad, 0x60, 0xe3, 0xc0, 0x7f, 0xd2, 0x45, 0x35, 0xd5,
	0xc3, 0x58, 0xc4, 0xc3, 0x7e, 0x4b, 0x73, 0x33, 0x95, 0x64, 0x7f, 0x62, 0x8c, 0xd4, 0x3d, 0x4a,
	0x2f, 0xad, 0x4e, 0x1b, 0xce, 0xd2, 0xb9, 0x37, 0x9e, 0x1b, 0xae, 0xa9, 0x50, 0x32, 0xf1, 0xf8,
	0x67, 0x56, 0xc8, 0x9c, 0xff, 0xb8, 0xd8, 0x43, 0x3f, 0x2f, 0xf6, 0xd0, 0x87, 0xe7, 0xff, 0xe3,
	0xae, 0x1e, 0xcb, 0x8b, 0xab, 0x4d, 0x8f, 0x6f, 0x5a, 0xf5, 0xe9, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x23, 0xd1, 0x19, 0xed, 0xcd, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandHandlerClient is the client API for CommandHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandHandlerClient interface {
	Apply(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type commandHandlerClient struct {
	cc *grpc.ClientConn
}

func NewCommandHandlerClient(cc *grpc.ClientConn) CommandHandlerClient {
	return &commandHandlerClient{cc}
}

func (c *commandHandlerClient) Apply(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/commandhandler.CommandHandler/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandHandlerServer is the server API for CommandHandler service.
type CommandHandlerServer interface {
	Apply(context.Context, *Command) (*Response, error)
}

// UnimplementedCommandHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedCommandHandlerServer struct {
}

func (*UnimplementedCommandHandlerServer) Apply(ctx context.Context, req *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}

func RegisterCommandHandlerServer(s *grpc.Server, srv CommandHandlerServer) {
	s.RegisterService(&_CommandHandler_serviceDesc, srv)
}

func _CommandHandler_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandHandlerServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commandhandler.CommandHandler/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandHandlerServer).Apply(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commandhandler.CommandHandler",
	HandlerType: (*CommandHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _CommandHandler_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commandhandler.proto",
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlaceOrder != nil {
		{
			size, err := m.PlaceOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommandhandler(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintCommandhandler(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AggregateId) > 0 {
		i -= len(m.AggregateId)
		copy(dAtA[i:], m.AggregateId)
		i = encodeVarintCommandhandler(dAtA, i, uint64(len(m.AggregateId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommandhandler(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommandhandler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommandhandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandhandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandhandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommandhandler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommandhandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaceOrder == nil {
				m.PlaceOrder = &commands.PlaceOrder{}
			}
			if err := m.PlaceOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommandhandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommandhandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommandhandler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommandhandler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommandhandler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommandhandler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommandhandler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommandhandler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommandhandler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommandhandler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommandhandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommandhandler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommandhandler
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommandhandler
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommandhandler
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommandhandler        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommandhandler          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommandhandler = fmt.Errorf("proto: unexpected end of group")
)
